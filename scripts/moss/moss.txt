     MOSS: A System for Detecting Software Plagiarism

          A QUICK GUIE TO GET YOU STARTED ASAP


INTRODUCTION:

To learn all the beauties about this system, visit the official
page at stanford:

http://theory.stanford.edu/~aiken/moss


MY TAKE:

This tool has been passed on among people until it got to my hands.
I had to learn it by reading the documentation provided on the moss
script, but it may take some time, so before I leave, I wanted to 
pass on the little knowledge I have to those who may use this tool
in trying to perform their TA duties.

The installation of this script is relatively simple, the hardest
part is interpreting the results that you will obtain from the 
server that you connect to when you run the script.

Although you may not understand this right now, I would like to 
advise the following: use the results as an indication of cheating,
and never as a definitive proof. Moss is a complex AI system that 
finds similarities in the code checked, but it is still a machine,
and does not have the human intuition that we have.


QUICK INSTALLATION

All you have to do is copy the 'moss' script onto your home bin 
directory: '~/bin' so you may invoke it anywhere on the system. Also,
do not forget to change the permissions of this file; add excecutable
permissions on the owner: 'chmod u+x ~/bin/moss'

You may of course follow the instructions provided on the official
web site and download your own copy. If you do this, you will get a 
series of emails that registers you to the system and assigns you a
'userid'. For some reason, my predecessors and I failed to register
and, unfortunately, spent hours of pain and suffering. The script
provided here uses some person's userid that still works, so I suggest 
you go the easy way and use the provided script, unless you want to 
go the legit way (oh my god! the irony!).


USING MOSS

The simplest way to use MOSS to check c++ code of your student is the 
following:

moss -d -l cc dir [dirs ]

The option '-d' says that the script will take a directory that contains
files with source code. The option '-l' indicates the language and 'cc'
says that the code revised is 'c++'. Then you must provide at least one
directory 'dir' and optional directories 'dirs'.

So, assuming the current file system:

/courses/cs010/cs010_07xx/submissions/graded/assnX/ ...  (yes I TA cs010)

I would run my moss script as follows:

$ moss -d -l cc /courses/cs010/cs010_07*/submissions/graded/assnX/*/ONTIME/*.cpp

provided that I want to check all the submissions for assignment X done in
the year 2007. Notice that in the current file system that I used, the 
users are under the directory assnX under their login id. The source is in
a directory called ONTIME, which is a legacy directory created by an old 
submission system used since 2004 (or even before, when I was an undergrad
grader).

After running the command, you will notice that the script creates a tar 
ball of everyting and it sends it to the Stanford servers. Now for some
reason (actually due to the system admin people policies I suspect), this
script does not work with all the current servers available at ucr (hill, 
eon, or orpheus), so you must use: grader.cs.ucr.edu. In case this changes,
you must find out with the system admins.

Moss will return with a link as response. This link has the result with all the
comparisons side by side of the top most similar code of everyone's submissions.
This link is publicly available (no privacy here, so never ask them to put
their personal info such as phone numbers or SSN on their code), so just 
follow it on your prefered browser.


INTERPRETING THE RESULTS

When you finally get to this stage, beaware of the perverse instinct of 
overdoing the inspection: remember that you once were a student and you 
worked with your pals without the intention of cheating (really! that 
thought never crossed my mind).

So you will get, among other stuff, two columns with two files being 
compared against each other. You will also notice a percentage number next 
to their name and a third column with the number of matched lines.
Fortunately, the comparisons are sorted in decreasing order of matched 
lines, which will give you a higher indication of cheating issues. If you click
on a line, you will be taken to another page that shows you the code
compared side by side.

At this point it is all up to you. I have seen many people being too evil 
catching people like ants in my yard or too benevolent (or lazy). I guess I 
am of those who are a little lazy but by now I can smell cheaters in a mile 
radius. So I advise the same again: use moss as a tool, not as proof of 
cheating.

Have fun catching the outlaws!
